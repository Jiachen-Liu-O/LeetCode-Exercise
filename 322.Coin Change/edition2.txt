//How can I do better? Maybe I can try to only compute elements I needed but not all location of min[]

//Runtime: 11 ms, faster than 60.64% of Java online submissions for Coin Change.
//Memory Usage: 35.9 MB, less than 95.27% of Java online submissions for Coin Change.

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] min = new int[amount+1];
        int setSize = coins.length;
        
        //base case
        min[0] = 0;
        
        //recurrence:
        for(int i = 1; i <= amount; i++){
            min[i] = -1;
            for(int j = 0; j <setSize; j++){
                if((i - coins[j]) >= 0){
                    if((min[i-coins[j]])>-1){
                        min[i] = (min[i] == -1) ? min[i - coins[j]] + 1: Math.min(min[i], min[i-coins[j]]+1);
                    }
                    
                }
            }
        }
        
        
        return min[amount];
    }
}